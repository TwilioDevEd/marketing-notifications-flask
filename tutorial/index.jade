.step(data-title='Introduction',
      data-file='marketing_notifications_python/bootstrap.py')
  :markdown
    ## SMS and MMS Marketing Notifications

    Ready to implement SMS and MMS marketing notifications? Here's how it works
    at a high level:

    1. A user you'd like to reach sends an SMS text message to a Twilio phone
       number you advertise online, on TV or in print.

    2. Your application confirms that the user wants to receive SMS and MMS
       notifications from your application.

    3. An administrator or marketing campaign manager uses a web form to craft a
       message that will go out to all subscribers via SMS/MMS message.

    ## Building Blocks

    To get this done, you'll be working with the following Twilio APIs:

    * [TwiML](//www.local.twilio.com/docs/api/twiml) and the [<Message>
    Verb](/docs/api/twiml/sms/message): We'll use TwiML to manage interactions
    initiated by the user via SMS.

    * [Messages Resource](/docs/api/rest/sending-sms): We will use the REST API
    to broadcast messages out to all subscribers.

    Let's get started! Click the right arrow to move on to the next step of the
    tutorial.

    **See Also**
    * [Web development with Python and Flask](http://flask.pocoo.org/)

.step(
  data-title='Subscriber',
  data-file='marketing_notifications_python/models/subscriber.py')
  :markdown
    ## Subscriber

    In order to send out marketing notifications to a subscriber, we need to
    provide the right model.

    * The `phone_number` allows the application to know where to send the
    notifications.

    * `subscribed` lets the application identify which subscribers are
    active, only an active subscribers will receive notifications.

    **See Also**
    * [Database Migrations in Flask](https://flask-migrate.readthedocs.org/en/latest/)


.step(
  data-title='Handling Incoming Messages',
  data-file='marketing_notifications_python/views.py'
  data-highlight='38-52')
  :markdown
    ## Handling Incoming messages

    This is the endpoint that will be called every time our application receives
    a message.

    We begin by getting the user's phone number from the incoming [Twilio
    request](/docs/api/twiml/sms/twilio_request). Now, we need to find a
    `Subscriber` model with that phone number.

    If there's no subscriber with this phone number, we create one, save it, and
    respond with a message asking them to send an SMS with the message "add". This
    is done to confirm that they want to receive messages from us.

    **See Also:**
    * [Twilio TwiML](//www.twilio.com/docs/quickstart/python/twiml)


.step(
  data-title='Replying received messages',
  data-file='marketing_notifications_python/twilio/twilio_services.py'
  data-highlight='21-24')
  :markdown
    ## Replying received messages

    Once we had received the Twilio request with the user's information and
    registered the number successfully, we can ask Twilio to reply with an SMS
    by creating a `twiml.Response` and calling `message` method on
    the created object passing it the desired text.

    **See Also:**
    * [Replying Twilio messages](//www.twilio.com/docs/quickstart/python/sms/replying-to-sms-messages)

.step(
  data-title='Manage Subscriptions',
  data-file='marketing_notifications_python/views.py'
  data-highlight='54-65')
  :markdown
    ## Manage Subscriptions

    We want to provide the user with two SMS commands to manage their
    subscription status: `add` and `remove`.  These commands will
    toggle a boolean flag for their `Subscriber` record in the database, and
    will determine whether or not they receive messages from our marketing
    campaign. To respect our user's desires, we don't opt them in automatically -
    rather they have to confirm that they want to receive messages from us
    first.

    To make this happen, we will need to update the controller logic which
    handles the incoming text message to do a couple things:

    * If the user is already in the database, parse the message
    they sent to see if it's a command we recognize.

    * If it is a `add` or `remove` command, update their
    subscription status in the database.

    * If it is a command we don't recognize, send them a message explaining
    the available commands.

.step(
  data-title='Sending Notifications',
  data-file='marketing_notifications_python/views.py'
  data-highlight='20-37')
  :markdown
    ## Sending Notifications

    On the server, we grab the message text and image URL, then loop through all
    Subscribers and call the method `send_message` on our `TwilioServices` domain object
    to send the message.

    When the messages are on their way, we redirect back to the same form
    with a request custom `flash` attribute message containing feedback about
    the messaging attempt.


.step(
  data-title='Send SMS or MMS Notifications',
  data-file='marketing_notifications_python/twilio/twilio_services.py'
  data-highlight='13-19')
  :markdown
    ## Send SMS or MMS Notifications

    Now that we have a list of subscribers for our awesome SMS and MMS content,
    we need to provide our marketing team some kind of interface to send out
    messages.

    When the model object is loaded, it creates a [Twilio REST API
    client](https://github.com/twilio/twilio-python) that can be used to send SMS and
    MMS messages. The client requires your Twilio account credentials (an
    account SID and auth token), which can be found [in the account
    portal](/user/account).

    Next all we need to do is call `messages.create` on the client object in
    order to send our message. The Twilio Message API call requires a 'From' and
    'To' parameter and a 'Body' or/and a 'MediaUrl' attribute.

.step(data-title='Where to Next?')
  :markdown
    ## Where to Next?

    That's it! We've just implemented a an opt-in process and an administrative
    interface to run an SMS and MMS marketing campaign. Now all you need is
    killer content to share with your users via text or MMS.

    If you're a Python | Flask developer working with Twilio, you might enjoy these
    other tutorials:

    [**Appointment reminders**](//www.twilio.com/docs/tutorials/walkthrough/appointment-reminders/python/flask)

    Automate the process of reaching out to your customers in advance of an
    upcoming appointment.

    [**Click To Call**](//www.twilio.com/docs/tutorials/walkthrough/click-to-call/python/flask)

    Convert your company web traffic into phone calls with the click of a button.

    ### Did this help?

    Thanks for checking this tutorial out! If you have any feedback to share
    with us, we'd love to hear it.
    [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
